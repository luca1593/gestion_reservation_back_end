pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    environment {
        // Variables d'environnement
        APP_NAME = 'gsrt-app'
        VERSION = '1.0.0'
        BUILD_ID = "${currentBuild.number}"
        WORKSPACE_DIR = "${WORKSPACE}"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')                      // Timeout global
        buildDiscarder(logRotator(numToKeepStr: '10'))          // Conserver les 10 derniers builds
    }

    stages {
        stage('Compilation') {
            steps {
                echo 'üì¶ Compilation du projet...'
                sh 'mvn clean compile'
            }
        }

        stage('Tests unitaires') {
            steps {
                echo 'üß™ Ex√©cution des tests unitaires...'
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'    // Publication des r√©sultats de test
                }
            }
        }

        stage('Packaging') {
            steps {
                echo 'üì¶ Packaging du projet...'
                sh 'mvn package'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    echo '‚úÖ Package cr√©√© avec succ√®s'
                }
            }
        }

        stage('D√©ploiement & Ex√©cution') {
            steps {
                script {
                    echo 'üöÄ Lancement de l\'application...'

                    // Trouver le JAR g√©n√©r√©
                    def jarFile = findFiles(glob: 'target/*.jar')[0].name
                    def fullJarPath = "${WORKSPACE}/target/${jarFile}"
                    echo "üóÇÔ∏è JAR trouv√©: ${fullJarPath}"

                    if (fileExists('scripts/start-app.sh')) {
                        sh """
                            chmod +x scripts/start-app.sh
                            scripts/start-app.sh ${fullJarPath} ${BUILD_ID}
                        """
                    } else {
                        echo '‚ö†Ô∏è Script de d√©marrage non trouv√©, ex√©cution directe du JAR...'
                        sh "nohup java -jar ${fullJarPath} --server.port=8081 &"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üìä Pipeline termin√© - Nettoyage en cours...'
            // Actions de nettoyage, si n√©cessaire
        }

        success {
            echo 'üéâ Pipeline ex√©cut√© avec succ√®s !'
            // Notification ou actions suppl√©mentaires
        }

        failure {
            echo '‚ùå Pipeline √©chou√© !'
            // Envoi d‚Äôun email en cas d‚Äô√©chec
            emailext (
                subject: "‚ùå BUILD FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: "La construction a √©chou√©. Consultez: ${env.BUILD_URL}",
                to: "luca.adam23@gmail.com"
            )
        }

        unstable {
            echo '‚ö†Ô∏è Pipeline instable (√©chec de tests/unitaires)'
        }
    }
}